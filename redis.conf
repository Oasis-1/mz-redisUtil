# Redis configuration file example.
#
# Note that in order to read the configuration file, Redis must be
# started with the file path as first argument:
# 
# 开始启动时必须如下指定配置文件

# ./redis-server /path/to/redis.conf

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
# 
# 存储单位如下所示

# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
################################## INCLUDES ###################################

# include file可以对redis做些定制化配置，并且incude是可嵌套的
# include是不能被config rewite命令改写的。为避免CONFIG REWRITE被Include文件覆盖，最好把
# include文件放在redis.conf文件之前。
# 如果需要使用多配置文件配置redis，请用include
# include /path/to/local.conf
# include /path/to/other.conf
################################## MODULES #####################################

# 手动设置加载模块（当服务无法自动加载时设置）
# 4.0新功能，加载用户自定义模块。可通过配置文件加载，也可命令动态加载
# loadmodule /path/to/my_module.so
# loadmodule /path/to/other_module.so

################################## NETWORK #####################################

# 默认情况下，redis监听所有网络段的请求。
# 如果想只让它在一个网络接口监听，可以通过bind绑定一个或者多个ip，ip之间用空格隔开
# Examples:
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1 ::1
# 警告：redis直接接到公网，监听所有网络段是非常危险的。最好不要注释掉下面的bind，
# 它将保证redis只接受本机客户端请求。
# 确定需要监听所有网络段的请求，只需要注释掉下行。
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 当redis实例：
# 1) 未bind ip
# 2) 未设置密码
# 当开启protected-mode时，开启保护模式，不提供服务。
# 只有本机redis客户端（或者unix socket）可提供访问
#bind 127.0.0.1
bind 0.0.0.0

# 保护模式：不允许外部网络连接redis服务
protected-mode no

# 设置端口号
port 6379

# TCP listen() backlog.
# TCP 连接数，此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度
# 避免高并发情况下，建立连接缓慢的问题。
# backlog最大值由somaxconn和tcp_max_syn_backlog最小值决定。
tcp-backlog 511

# Unix socket.
# 通信协议设置，本机通信使用此协议不适用tcp协议可大大提升性能
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# 当客户端空闲n秒后，将关闭链接，释放客户端。
# 0不会释放
timeout 0

# TCP keepalive.
# 定时给客户端发送tcp ack，有以下两方面的用处：
# 1) 发现tcp链接已断开的客户端
# 2) 保持整个网络处于alive状态
# 在linux中，tcp-keeplive是发送ack定时时间间隔。
# 注意，关闭这个链接最长需要2倍的tcp-keepalive时间。这是为什么？
# 定期检测cli连接是否存活
tcp-keepalive 300
################################# GENERAL #####################################

# 是否守护进程运行（后台运行）
daemonize yes

# 如果使用upstart或者systemd启动redis，redis可能被影响：？
# supervised no - 没有影响
# supervised upstart - 通过将Redis置于SIGSTOP模式来启动信号
# supervised systemd - signal systemd将READY = 1写入$ NOTIFY_SOCKET
# supervised auto - 检测upstart或systemd方法基于 UPSTART_JOB或NOTIFY_SOCKET环境变量
# 是否通过upstart和systemd管理Redis守护进程
supervised no

# redis启动时往pid文件中写入pid（避免启动进程副本），退出时将会移除它。
# redis以daemon方式启动时，即使pidfile未指定，也会生成Pid文件默认放在"/var/run/redis.pid"
# 以后台进程方式运行redis，则需要指定pid 文件
pidfile /var/run/redis_6379.pid


# 定义日志级别。
# 可以是下面的这些值：
# debug（记录大量日志信息，适用于开发、测试阶段）
# verbose（较多日志信息）
# notice（适量日志信息，使用于生产环境）
# warning（仅有部分重要、关键信息才会被记录）
# loglevel notice

# 指定日志文件名。
# 如果为空字符串且非守护进程，为标准输出。
# 如果为空字符串且为守护进程，日志输出到/dev/null。
logfile ""


# 'syslog-enabled'设置为yes会把日志输出到系统日志，默认是no?
# syslog-enabled no


# 指定syslog的标示符，如果'syslog-enabled'是no，则这个选项无效
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
# 指定syslog 设备（facility), 必须是USER或者LOCAL0到LOCAL7.
# syslog-facility local0

# 设置数据库数目。默认的数据库是DB 0。可以通过SELECT <dbid>来选择一个数据库，dbid是[0,'databases'-1]的数字
databases 16

always-show-logo no
################################ SNAPSHOTTING ################################

#RBD模式的触发条件
# <seconds>和<changes>都满足时就会触发数据保存动作。
# 以下面的例子来说明：
# 过了900秒并且有1个key发生了改变 就会触发save动作
# 过了300秒并且有10个key发生了改变 就会触发save动作
# 过了60秒并且至少有10000个key发生了改变 也会触发save动作
# 注意：如果你不想让redis自动保存数据，那就把下面的配置注释掉！
save 900 1
save 300 10
save 60 10000

# 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作.
# 使用户知道数据不能被持久化，否则没有人注意到严重的事故发生。
# 如果后台持久化正常工作，那么redis就会正常工作。
# 如果对redis持久化有比较好的监控，那么可以设置为no。
# 持久化出现错误后，是否依然进行继续进行工作
stop-writes-on-bgsave-error yes

# yes 表示 dump .rdb 数据库的时候使用 LZF 压缩字符串。设置为no可以使进程节省cpu，不过数据集就会比较大。
# 使用压缩rdb文件 yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间
rdbcompression yes

# checksum使格式更能抵抗损坏，但是当saving和loading rdb会额外损耗10%性能，所以关闭checksum会获取更好的性能。
# 是否校验rdb文件，更有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗
rdbchecksum yes

# RBD文件的文件名
dbfilename dump.rdb

# 工作目录
# 这个配置项一定是个目录，而不能是文件名。
dir ./

################################# REPLICATION #################################

# 1) Redis 复制是异步的，但是你可以通过设置master来保证至少有一个从库，
# 该从库与主库保存主从关系。
# 2) Redis 从库在与主库断连后，可以做部分同步。但是你需要配置合理的backlogsize大小
# 3) Repliaction复制是自动的，不需要用户干预。

# replicaof 即slaveof 设置主结点的ip和端口
# replicaof <masterip> <masterport>
# slaveof <masterip> <masterport>

# 建立主从关系时，需要从库auth master-password。通过主库验证之后，才能建立主从关系。
# 密码
# masterauth <master-password>

# 当一个 slave 与 master 失去联系，或者复制正在进行的时候
# 1）如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，或者数据可能是空的在第一次同步的时候
# 2) 如果为 no ，slave 都将返回一个 "SYNC with master in progress" 的错误
# yes是可用性  no是一致性
slave-serve-stale-data yes

# Redis 2.6起，slave默认可读。
slave-read-only yes

# 主从复制策略
# -------------------------------------------------------
# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY
# -------------------------------------------------------

# 做全量同步时，RDB文件需要从主库传到从库中：
# 1) 主库fork一个子进程，将rdb文件写到磁盘中。之后，父进程会将这个rdb文件传送给从库。
# 2）主库fork一个子进程，直接将rdb文件写入到salve socket缓冲区中，完全不需要disk。
# 通过磁盘复制，在生成rdb文件过程中，如果有从库在此期间请求建立主从关系，可以服用这个rdb文件。
# 无盘复制，一旦传输rdb开始（没有生成rdb过程，直接write到socket上传输），就不可复用这次传输的rdb。
# 所以使用无盘复制，master需要等待一段时间，以便等待更多的slave做同步。
# 在物理机磁盘容量较小，并且网络状况非常好事，无盘复制会更好。
# 是或否创建新进程进行磁盘同步设置
repl-diskless-sync no

# 服务器等待一段时间后才会通过套接字向从站传送RDB文件，这个等待时间是可配置的。
# 这一点很重要，因为一旦传送开始，就不可能再为一个新到达的从站服务。从站则要排队等待下一次RDB传送。因此服务器等待一段
# 时间以期更多的从站到达。
# 延迟时间以秒为单位，默认为5秒。要关掉这一功能，只需将它设置为0秒，传送会立即启动。
# master节点创建子进程前等待的时间
repl-diskless-sync-delay 5

# 从redis会周期性的向主redis发出PING包，你可以通过repl_ping_slave_period指令来控制其周期，默认是10秒。
# Replicas发送PING到master的间隔，默认值为10秒。
# repl-ping-slave-period 10


# 主从超时：
# 1）传输rdb时，从库超时未收到rdb。
# 2）从库未接收到主库的ping或者data。
# 3）主库未接受到从库的ping。
# 确认这些值比定义的repl-ping-slave-period要大，否则每次主站和从站之间通信频率低时都会被检测为超时。
# repl-timeout 60


appendonly no

# 是否开启nagle算法
# 设置为yes时，redis将使用更少的tcp packets和更少的带宽做主从同步。但同时也
# 会增加主从延迟，延迟将高达40ms。
# 设置为no，这种延迟将降低，但带宽将会增大。
# 默认情况下，系统需要低延迟，最好设置为yes。但是访问量较大时，最好设置为yes。
repl-disable-tcp-nodelay no

# 设置复制backlogsize。 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时
# 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，
# 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。
# repl-backlog-size 1mb

# master 不再连接 slaves，超过一段时间，backlog 将被释放。
# 如果设置为0，则表示用不释放。
# repl-backlog-ttl 3600


# 当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，
# 这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。
slave-priority 100


# 当延迟比M大或者处于online状态的slave比N小，则master停止写。
# The N slaves need to be in "online" state.
# min-slaves-to-write 3
# min-slaves-max-lag 10

# 当端口重定向或者网络地址被转换，从库可以从不同的Ip，port到达。下面的配置是为了
# 给主库一个特定的ip和port,这样以便info和role可以汇报这个值。
# slave-announce-ip 5.5.5.5
# slave-announce-port 1234

################################## SECURITY ###################################

# 设置redis连接密码
# requirepass foobared
requirepass wleo6ZKo

# 将命令重命名，为了安全考虑，可以将某些重要的、危险的命令重命名。
# 当你把某个命令重命名成空字符串的时候就等于取消了这个命令。
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
# 注意对命令重命令将会记录到aof中，或者传输到从库，将会导致一些问题。

################################### CLIENTS ####################################

# 设置客户端最大并发连接数，默认无限制，如果设置 maxclients为0
# 表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
# maxclients 10000

############################## MEMORY MANAGEMENT ################################

# 设置redis最大内存容量。当内存超过最大容量，Redis会先尝试清除已到期或即将到期的Key。
# 当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。
# 如果redis使用noeviction策略，则不允许写操作。
# 注意:redis剔除数据时，不包含aof缓冲区和client_outputbuf_slave。减去client_outputbuf_slave是为了避免
# 触发循环。当剔除数据时，这些命令会放在client_outputbuf_slave中，这样会反过来导致更多的key被剔除，直到所有数据被剔除。
# 所以当有从库时，有必要将maxmemory设置小一些，为client_outputbuf_slave空出一些空间。
# maxmemory <bytes>

# 当内存使用达到最大值时，redis使用的清楚策略。有以下几种可以选择：
# 1）volatile-lru 利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )
# 2）allkeys-lru 利用LRU算法移除任何key
# 3）volatile-random 移除设置过过期时间的随机key
# 4）allkeys-random 移除随机key
# 5）volatile-ttl 移除即将过期的key(minor TTL)
# 6）noeviction noeviction 不移除任何key，只是返回一个写错误 ，默认选项
# LRU means Least Recently Used
# LFU means Least Frequently Used


# maxmemory-policy noeviction


# 默认的配置是5。设置为10非常接近lru算法，但是耗费过度cpu，设置为3，速度会提升，但准确率会下降。
# maxmemory-samples 5

############################# LAZY FREEING ####################################

# Redis有两种删除key的方式。一种是阻塞删除。再删除大key时，会阻塞服务。
# 因此引入了非阻塞key。unlink(non blocking DEL),flushdb,flushall(ASYNC option)。
# 启动异步线程来进行这些操作。
# 这些异步删除操作都是用户控制的。让用户自己去选择使用哪种方式是一个好的设计。
# 但是redis本身可能删除操作会对其他操作造成影响，以下是redis自发的异步删除操作。
# 1) 剔除key
# 2) 删除过期key
# 3) 类似rename这种操作
# 4) 复制过程中，从库flushdb
# 默认的都是阻塞方式，可以通过以下参数配置
# 惰性删除或延迟释放
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
slave-lazy-flush no